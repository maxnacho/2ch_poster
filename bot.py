import os
import requests
import asyncio
import json
import random
import re
import logging
from io import BytesIO
from telegram import Bot, InputMediaPhoto, InputMediaVideo
from telegram.error import RetryAfter, TimedOut, BadRequest
from html import unescape
from PIL import Image
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
THREAD_URL = os.getenv("THREAD_URL")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHANNEL_ID or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è REST API
headers = {
    "apikey": SUPABASE_KEY,
    "Content-Type": "application/json",
}
base_url = f"{SUPABASE_URL}/rest/v1"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –ø–æ—Å—Ç
def is_post_sent(post_id):
    url = f"{base_url}/sent_posts?select=post_id&post_id=eq.{post_id}"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        return len(data) > 0
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_sent_post(post_id):
    url = f"{base_url}/sent_posts"
    data = {"post_id": post_id}
    try:
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 201:
            logger.info(f"Post {post_id} successfully added to database")
            return True
        elif response.status_code == 400:
            error_data = response.json()
            if "message" in error_data and "unique constraint" in error_data["message"].lower():
                logger.info(f"Post {post_id} already exists in database")
                return False
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.text}")
                return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {response.status_code} {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        return False

# –û—á–∏—Å—Ç–∫–∞ HTML
def clean_html(text):
    text = unescape(text)
    text = re.sub(r"<a .*?>(.*?)</a>", r"\1", text)
    text = re.sub(r"<br\s*/?>", "\n", text)
    text = re.sub(r"<.*?>", "", text)
    return text.strip()

# –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
def split_text(text, max_length=4096):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–µ—Å–∞–π–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def validate_and_resize_image(image_data):
    try:
        img = Image.open(BytesIO(image_data))
        if img.mode in ("P", "RGBA", "LA"):
            img = img.convert("RGB")
        width, height = img.size
        if width < 320 or height < 320 or width > 10000 or height > 10000:
            img = img.resize((1280, 720))
        output = BytesIO()
        img.save(output, format="JPEG")
        output.seek(0)
        return output
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–∞
def get_all_posts():
    try:
        response = requests.get(THREAD_URL, timeout=10)
        data = response.json()
        return data["threads"][0]["posts"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def send_post_to_telegram(bot, chat_id, post, max_retries=3):
    post_id = str(post["num"])
    text = clean_html(post.get("comment", ""))
    files = post.get("files", []) or []
    media_group = []

    header = f"#{post_id}"
    text = f"{header}\n\n{text}" if text else header

    file_links = []
    for file in files:
        file_url = f"https://2ch.hk{file['path']}"
        if file["path"].endswith((".webm", ".mp4")):
            file_links.append(f"üé• –í–∏–¥–µ–æ: {file_url}")

    if file_links:
        text += "\n\n" + "\n".join(file_links)

    messages = split_text(text)

    for attempt in range(max_retries):
        try:
            for file in files:
                file_url = f"https://2ch.hk{file['path']}"
                response = requests.get(file_url, timeout=10)
                if response.status_code == 200:
                    if file["path"].endswith((".jpg", ".jpeg", ".png", ".gif")):
                        image_data = validate_and_resize_image(response.content)
                        if image_data:
                            media_group.append(InputMediaPhoto(media=image_data))
                    elif file["path"].endswith((".webm", ".mp4")):
                        video_data = BytesIO(response.content)
                        media_group.append(InputMediaVideo(media=video_data))

            if media_group:
                for i in range(0, len(media_group), 10):
                    chunk = media_group[i:i+10]
                    if i == 0 and messages:
                        chunk[0] = InputMediaPhoto(media=chunk[0].media, caption=messages[0], parse_mode="HTML")
                    await bot.send_media_group(chat_id=chat_id, media=chunk)
                    await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –º–µ–¥–∏–∞

            for i, message in enumerate(messages):
                if i == 0 and media_group:
                    continue
                await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
                await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

            logger.info(f"Post {post_id} sent successfully")
            return True

        except RetryAfter as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            await asyncio.sleep(e.retry_after + 5)  # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è + 5 —Å–µ–∫—É–Ω–¥
            if attempt == max_retries - 1:
                logger.warning(f"Failed to send post {post_id} after {max_retries} attempts")
                return False
            continue

        except TimedOut as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            if attempt == max_retries - 1:
                logger.warning(f"Failed to send post {post_id} after {max_retries} attempts")
                return False
            continue

        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return False

    return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
async def bot_task():
    logger.info("Bot task started")
    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    while True:
        logger.info("Checking for new posts")
        all_posts = get_all_posts()
        logger.info(f"Found {len(all_posts)} posts")
        for post in all_posts:
            post_id = str(post["num"])
            if is_post_sent(post_id):
                logger.info(f"Post {post_id} already sent, skipping")
                continue

            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É
            if add_sent_post(post_id):
                logger.info(f"Sending post {post_id} to Telegram")
                success = await send_post_to_telegram(bot, TELEGRAM_CHANNEL_ID, post)
                if not success:
                    logger.warning(f"Failed to send post {post_id} to Telegram")
            else:
                logger.warning(f"Failed to add post {post_id} to database, skipping Telegram send")

        await asyncio.sleep(60 + random.uniform(1, 5))

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def health(request):
    return web.Response(text="OK")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.add_routes([web.get('/health', health)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('PORT', 10000))  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 10000, —Ç–∞–∫ –∫–∞–∫ Render –æ–±–Ω–∞—Ä—É–∂–∏–ª —ç—Ç–æ—Ç –ø–æ—Ä—Ç
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞
    bot_task_instance = asyncio.create_task(bot_task())

    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã event loop
    await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

    # –û—á–∏—Å—Ç–∫–∞ (–Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –Ω–æ —Ö–æ—Ä–æ—à–æ –∏–º–µ—Ç—å)
    await runner.cleanup()
    bot_task_instance.cancel()

if __name__ == "__main__":
    asyncio.run(main())